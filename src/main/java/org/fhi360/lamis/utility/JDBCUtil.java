
package org.fhi360.lamis.utility;


import org.fhi360.lamis.config.ContextProvider;

import javax.sql.DataSource;
import java.sql.*;

public class JDBCUtil {
    private Connection connection;
    private static PreparedStatement preparedStatement;
    private static CallableStatement callableStatement;
    private static ResultSet resultSet;

    //keep track of database connection status
    private static boolean connectedToDatabase = false;

    //constructor initializes and connect to database
    public JDBCUtil() {
        try {
                connection = ContextProvider.getBean(DataSource.class).getConnection();
                connectedToDatabase = true;
        } catch (Exception exception) {
            exception.printStackTrace();
        }
    } //end of constructor

    //constructor initializes and connect to database
    public JDBCUtil(String url, String user, String password, String driver) {
        try {
            connection = ContextProvider.getBean(DataSource.class).getConnection();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        //update database connection
            connectedToDatabase = true;
    } //end of constructor

    //set new database query string
    public PreparedStatement getStatement(String query) throws IllegalStateException {
        //ensure database connection is available
        if (!connectedToDatabase) throw new IllegalStateException("Not Connected to Database");
        try {
            //specify query and execute it
            preparedStatement = connection.prepareStatement(query);
        } catch (SQLException sqlException) {
            sqlException.printStackTrace();
        }
        return preparedStatement;
    } //end of method setQuery

    public PreparedStatement getPreparedStatement(String query) throws IllegalStateException {
        //ensure database connection is available
        if (!connectedToDatabase) throw new IllegalStateException("Not Connected to Database");
        try {
            //specify query and execute it
            preparedStatement = connection.prepareStatement(query);
        } catch (SQLException sqlException) {
            sqlException.printStackTrace();
        }
        return preparedStatement;
    } //end of method setQuery

    public Statement getStatement() {
        Statement statement = null;
        //ensure database connection is available
        if (!connectedToDatabase) {
            throw new IllegalStateException("Not Connected to Database");
        }
        try {
            //specify query and execute it
            statement = connection.createStatement();
        } catch (Exception sqlException) {
            sqlException.printStackTrace();
        }
        return statement;
    } //end of method setQuery

    //set new database query string
    public PreparedStatement getStatement(String query, int autoGeneratedKeys) throws IllegalStateException {
        //ensure database connection is available
        if (!connectedToDatabase) throw new IllegalStateException("Not Connected to Database");
        try {
            //specify query and execute it
            preparedStatement = connection.prepareStatement(query, autoGeneratedKeys);
        } catch (SQLException sqlException) {
            sqlException.printStackTrace();
        }
        return preparedStatement;
    } //end of method setQuery

    //set new store procedure call query string
    public CallableStatement getCallable(String query) throws IllegalStateException {
        //ensure database connection is available
        if (!connectedToDatabase) throw new IllegalStateException("Not Connected to Database");
        try {
            //specify query and execute it
            callableStatement = connection.prepareCall(query);
        } catch (SQLException sqlException) {
            sqlException.printStackTrace();
        }
        return callableStatement;
    }

    public int getRowCount(ResultSet resultSet) throws IllegalStateException {
        int numberOfRows = 0;
        if (!connectedToDatabase) throw new IllegalStateException("Not Connected to Database");
        try {
            resultSet.last();
            numberOfRows = resultSet.getRow();
        } catch (SQLException sqlException) {
            sqlException.printStackTrace();
        }
        return numberOfRows;
    }

    //close Statement and Connection
    public void disconnectFromDatabase() {
        if (connectedToDatabase) {
            try {
                if (resultSet != null) {
                    resultSet.close();
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                }
                if (connection != null) {
                    connection.close();
                }
            } catch (SQLException sqlException) {
                sqlException.printStackTrace();
            } finally {
                connectedToDatabase = false;
            }
        }
    }

    public Connection getConnection() {
        return connection;
    }

    public void setConnection(Connection connection) {
        this.connection = connection;
    }


}


//        String url = ServletActionContext.getServletContext().getInitParameter("db.url");
//        String user = ServletActionContext.getServletContext().getInitParameter("db.user");
//        String password = ServletActionContext.getServletContext().getInitParameter("db.password");
//        String driver = ServletActionContext.getServletContext().getInitParameter("db.driver");
        
